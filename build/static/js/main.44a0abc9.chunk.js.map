{"version":3,"sources":["Home/Home.jsx","useChat.js","UserAvatar/UserAvatar.js","ChatMessage/ChatMessage.js","useTyping.js","NewMessageForm/NewMessageForm.js","TypingAnimation/TypingAnimation.js","TypingMessage/TypingMessage.js","ChatRoom/ChatRoom.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","roomName","setRoomName","className","type","placeholder","value","onChange","event","target","to","NEW_CHAT_MESSAGE_EVENT","START_TYPING_MESSAGE_EVENT","STOP_TYPING_MESSAGE_EVENT","SOCKET_SERVER_URL","useChat","roomId","messages","setMessages","users","setUsers","typingUsers","setTypingUsers","user","setUser","socketRef","useRef","useEffect","a","axios","get","response","data","results","currentUser","JSON","parse","localStorage","getItem","name","avatar","setItem","stringify","picture","fetchUser","result","fetchUsers","fetchMessages","current","socketIOClient","query","on","console","log","id","filter","u","message","incomingMessage","ownedByCurrentUser","senderId","typingInfo","disconnect","sendMessage","messageBody","Date","date","getHours","getMinutes","emit","body","startTypingMessage","stopTypingMessage","UserAvatar","src","alt","title","ChatMessage","useTyping","isTyping","setIsTyping","isKeyPressed","setIsKeyPressed","countdown","setCountdown","interval","clearInterval","setInterval","c","startTyping","stopTyping","cancelTyping","NewMessageForm","newMessage","handleNewMessageChange","handleStartTyping","handleStopTyping","handleSendMessage","onKeyPress","onKeyUp","onClick","TypingAnimation","TypingMessage","alice","window","location","reload","bob","ChatRoom","props","match","params","setNewMessage","map","i","length","preventDefault","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44a0abc9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Home.css\";\n\nconst Home = () => {\n  const [roomName, setRoomName] = useState(\"\");\n\n  const handleRoomNameChange = (event) => {\n    setRoomName(event.target.value);\n  };\n\n  return (\n    <div className=\"home-container uk-card uk-card-default uk-card-body\">\n      <h3>Join Conversation</h3>\n      <input\n        type=\"text\"\n        placeholder=\"Room Name\"\n        value={roomName}\n        onChange={handleRoomNameChange}\n        className=\"uk-input uk-border-rounded\"\n      />\n      <Link to={`/${roomName}`} className=\"uk-button uk-border-rounded uk-button-primary uk-margin-medium-top\">\n        Create Room\n      </Link>\n    </div>\n  );\n};\n\nexport default Home;","import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport axios from \"axios\";\n\nconst USER_JOIN_CHAT_EVENT = \"USER_JOIN_CHAT_EVENT\";\nconst USER_LEAVE_CHAT_EVENT = \"USER_LEAVE_CHAT_EVENT\";\nconst NEW_CHAT_MESSAGE_EVENT = \"NEW_CHAT_MESSAGE_EVENT\";\nconst START_TYPING_MESSAGE_EVENT = \"START_TYPING_MESSAGE_EVENT\";\nconst STOP_TYPING_MESSAGE_EVENT = \"STOP_TYPING_MESSAGE_EVENT\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = (roomId) => {\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [user, setUser] = useState();\n  const socketRef = useRef();\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const response = await axios.get(\"https://api.randomuser.me/\");\n      const result = response.data.results[0];\n      var currentUser = JSON.parse(localStorage.getItem('selectedUser'));\n\n      if(currentUser == null){\n        const user = {name: 'Bob', avatar: 'Bob.jpg'};\n        localStorage.setItem('selectedUser', JSON.stringify(user));\n        currentUser = JSON.parse(localStorage.getItem('selectedUser'));\n      }\n\n      setUser({\n        name: currentUser.name,\n        picture: currentUser.avatar,\n      });\n    };\n\n    fetchUser();\n  }, []);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const response = await axios.get(\n        `${SOCKET_SERVER_URL}/rooms/${roomId}/users`\n      );\n      const result = response.data.users;\n      setUsers(result);\n    };\n\n    fetchUsers();\n  }, [roomId]);\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const response = await axios.get(\n        `${SOCKET_SERVER_URL}/rooms/${roomId}/messages`\n      );\n      const result = response.data.messages;\n      setMessages(result);\n    };\n\n    fetchMessages();\n  }, [roomId]);\n\n  useEffect(() => {\n    if (!user) {\n      return;\n    }\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { roomId, name: user.name, picture: user.picture },\n    });\n\n    socketRef.current.on(\"connect\", () => {\n      console.log(socketRef.current.id);\n    });\n\n    socketRef.current.on(USER_JOIN_CHAT_EVENT, (user) => {\n      if (user.id === socketRef.current.id) return;\n      setUsers((users) => [...users, user]);\n    });\n\n    socketRef.current.on(USER_LEAVE_CHAT_EVENT, (user) => {\n      setUsers((users) => users.filter((u) => u.id !== user.id));\n    });\n\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n\n    socketRef.current.on(START_TYPING_MESSAGE_EVENT, (typingInfo) => {\n      if (typingInfo.senderId !== socketRef.current.id) {\n        const user = typingInfo.user;\n        setTypingUsers((users) => [...users, user]);\n      }\n    });\n\n    socketRef.current.on(STOP_TYPING_MESSAGE_EVENT, (typingInfo) => {\n      if (typingInfo.senderId !== socketRef.current.id) {\n        const user = typingInfo.user;\n        setTypingUsers((users) => users.filter((u) => u.name !== user.name));\n      }\n    });\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, user]);\n\n  const sendMessage = (messageBody) => {\n    const current = new Date();\n    const date = `${current.getHours()}:${current.getMinutes()}`;\n\n    if (!socketRef.current) return;\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n      user: user,\n      date: date\n\n    });\n  };\n\n  const startTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(START_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user,\n    });\n  };\n\n  const stopTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(STOP_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user,\n    });\n  };\n\n  return {\n    messages,\n    user,\n    users,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage,\n  };\n};\n\nexport default useChat;\n","import React from \"react\";\nimport \"./UserAvatar.css\";\n\nconst UserAvatar = ({ user }) => {\n  return (\n    <>\n    <h3 className=\"room-name\">Typing as {user.name}</h3>\n    <div className=\"avatar-container\">\n      <img\n        src={user.picture}\n        alt={user.name}\n        title={user.name}\n        className={\"avatar\"}\n      ></img>\n      <span className=\"onlineIcon\"></span>\n      <span className=\"offlineIcon\"></span>\n      </div>\n    </>\n  );\n};\n\nexport default UserAvatar;\n","import React from \"react\";\nimport UserAvatar from \"../UserAvatar/UserAvatar\";\n\nimport \"./ChatMessage.css\";\n\nconst ChatMessage = ({ message }) => {\n  {console.log(message)}\n  var currentUser = JSON.parse(localStorage.getItem('selectedUser'));\n  if(currentUser == null){\n    const user = {name: 'Bob', avatar: 'Bob.jpg'};\n    localStorage.setItem('selectedUser', JSON.stringify(user));\n    currentUser = JSON.parse(localStorage.getItem('selectedUser'));\n  }\n\n  return (\n    \n    <div\n      className={`message-item ${\n        message.user.name === currentUser.name ? \"my-message\" : \"received-message\"\n      }`}\n    >\n      \n        <div className=\"message-avatar-container\">\n          <UserAvatar user={message.user}></UserAvatar>\n        </div>\n     \n\n      <div className=\"message-body-container\">\n       \n          <div className=\"message-user-name\">{message.user.name}  <div className=\"message-date\">{message.date}</div></div>\n      \n        \n        <div className=\"message-body\">{message.body}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatMessage;\n","import { useEffect, useState } from \"react\";\n\nconst useTyping = () => {\n  const [isTyping, setIsTyping] = useState(false);\n  const [isKeyPressed, setIsKeyPressed] = useState(false);\n  const [countdown, setCountdown] = useState(5);\n\n  const startTyping = () => {\n    setIsKeyPressed(true);\n    setCountdown(5);\n    setIsTyping(true);\n  };\n\n  const stopTyping = () => {\n    setIsKeyPressed(false);\n  };\n\n  const cancelTyping = () => {\n    setCountdown(0);\n  };\n\n  useEffect(() => {\n    let interval;\n    if (!isKeyPressed) {\n      interval = setInterval(() => {\n        setCountdown((c) => c - 1);\n      }, 1000);\n    } else if (isKeyPressed || countdown === 0) {\n      clearInterval(interval);\n    }\n\n    if (countdown === 0) {\n      setIsTyping(false);\n    }\n\n    return () => clearInterval(interval);\n  }, [isKeyPressed, countdown]);\n\n  return { isTyping, startTyping, stopTyping, cancelTyping };\n};\n\nexport default useTyping;\n","import React from \"react\";\nimport \"./NewMessageForm.css\";\n\nconst NewMessageForm = ({\n  newMessage,\n  handleNewMessageChange,\n  handleStartTyping,\n  handleStopTyping,\n  handleSendMessage,\n}) => {\n  return (\n    <form className=\"new-message-form\">\n      <input\n        type=\"text\"\n        value={newMessage}\n        onChange={handleNewMessageChange}\n        placeholder=\"Aa\"\n        className=\"uk-input uk-border-rounded\"\n        onKeyPress={handleStartTyping}\n        onKeyUp={handleStopTyping}\n      />\n      <button\n        type=\"submit\"\n        onClick={handleSendMessage}\n        className=\"uk-button uk-button-primary uk-border-rounded uk-margin-small-left\"\n      >\n        Send\n      </button>\n    </form>\n  );\n};\n\nexport default NewMessageForm;\n","import React from \"react\";\nimport \"./TypingAnimation.css\";\n\nconst TypingAnimation = () => {\n  return (\n    <div className=\"dotsContainer\">\n      <span id=\"dot1\"></span>\n      <span id=\"dot2\"></span>\n      <span id=\"dot3\"></span>\n    </div>\n  );\n};\n\nexport default TypingAnimation;\n","import React from \"react\";\nimport TypingAnimation from \"../TypingAnimation/TypingAnimation\";\n\nimport \"./TypingMessage.css\";\n\nconst TypingMessage = ({ user }) => {\n  return (\n    <div className=\"message-item\">\n      <div className=\"message-avatar-container\">\n        <img\n          src={user.picture}\n          alt={user.name}\n          className={\"message-avatar\"}\n        ></img>\n      </div>\n\n      <TypingAnimation></TypingAnimation>\n    </div>\n  );\n};\n\nexport default TypingMessage;\n","import React, { useEffect, useState } from \"react\";\n\nimport \"./ChatRoom.css\";\nimport useChat from \"../useChat\";\nimport ChatMessage from \"../ChatMessage/ChatMessage\";\nimport useTyping from \"../useTyping\";\nimport NewMessageForm from \"../NewMessageForm/NewMessageForm\";\nimport TypingMessage from \"../TypingMessage/TypingMessage\";\nimport UserAvatar from \"../UserAvatar/UserAvatar\";\n\nfunction alice() {\n  const user = {name: 'Alice', avatar: 'Alice.jpg'};\n  localStorage.setItem('selectedUser', JSON.stringify(user));\n  window.location.reload();\n}\n\nfunction bob() {\n  const user = {name: 'Bob', avatar: 'Bob.jpg'};\n  localStorage.setItem('selectedUser', JSON.stringify(user));\n  window.location.reload();\n}\n\nconst ChatRoom = (props) => {\n  const { roomId } = props.match.params;\n  const {\n    messages,\n    user,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage,\n  } = useChat(roomId);\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  const { isTyping, startTyping, stopTyping, cancelTyping } = useTyping();\n\n  const handleNewMessageChange = (event) => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = (event) => {\n    event.preventDefault();\n    cancelTyping();\n    sendMessage(newMessage);\n    setNewMessage(\"\");\n  };\n\n  useEffect(() => {\n    if (isTyping) startTypingMessage();\n    else stopTypingMessage();\n  }, [isTyping]);\n\n  return (\n    <div className=\"uk-grid uk-box-shadow-medium chat-height\">\n     \n      <div className=\"chat-sidebar uk-width-1-4@m\">\n            <div className=\"chat-selection uk-card uk-card-default uk-card-body\">\n            \n              <ul className=\"uk-nav-default uk-nav-parent-icon\">\n                <li><label>Current Users (2)</label></li>\n                  <li className=\"uk-active\" onClick={alice}>\n                    <div className=\"avatar-container\">\n                        <img src={\"Alice.jpg\"} className=\"avatar uk-margin-medium-right\"/>\n                        <span className=\"onlineIcon\"></span>\n                        <span className=\"offlineIcon\"></span>\n                    </div>\n                    \n                    Alice\n                    </li>\n                  <li className=\"uk-active\" onClick={bob}>\n                  <div className=\"avatar-container\">\n                    <img src={\"Bob.jpg\"} className=\"avatar uk-margin-medium-right\"/>\n                    <span className=\"onlineIcon\"></span>\n                    <span className=\"offlineIcon\"></span>\n                    </div>\n                    Bob\n                    </li>\n                \n              </ul>\n          </div>\n      </div>\n      <div className=\"uk-width-expand@s chat-relative\">\n      <div className=\"chat-room-top-bar uk-padding custom-box-shadow-medium uk-background-muted\">\n        {user && <UserAvatar user={user}></UserAvatar>}\n      </div>\n      <div className=\"chat-room-container\">\n        \n        \n        <div className=\"messages-container\">\n          <ol className=\"messages-list\">\n            {messages.map((message, i) => (\n              <li key={i}>\n                <ChatMessage user={user} message={message}></ChatMessage>\n              </li>\n            ))}\n            {typingUsers.map((user, i) => (\n              <li key={messages.length + i}>\n                <TypingMessage user={user}></TypingMessage>\n              </li>\n            ))}\n          </ol>\n        </div>\n        <NewMessageForm\n          newMessage={newMessage}\n          handleNewMessageChange={handleNewMessageChange}\n          handleStartTyping={startTyping}\n          handleStopTyping={stopTyping}\n          handleSendMessage={handleSendMessage}\n        ></NewMessageForm>\n      </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatRoom;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport Home from \"./Home/Home\";\nimport ChatRoom from \"./ChatRoom/ChatRoom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/:roomId\" component={ChatRoom} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}